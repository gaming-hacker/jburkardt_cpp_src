12 February 2020 09:25:05 AM

C8LIB_TEST
  C++ version
  Test the C8LIB library.

C8_ABS_TEST
  C8_ABS computes the absolute value of a C8.

       C1=C8_UNIFORM_01          R2=C8_ABS(C1)    R3=CABS(C1)
     ---------------------     ---------------  ---------------

       (0.44986,-0.126667)      0.467352      0.467352
      (-0.843197,-0.34428)      0.910774      0.910774
        (0.589627,0.26009)      0.644443      0.644443
          (0.39114,0.3234)      0.507521      0.507521
     (-0.139466,-0.156136)      0.209354      0.209354
     (-0.236066,0.0774593)       0.24845       0.24845
     (0.0185993,-0.633214)      0.633487      0.633487
       (0.89285,0.0103136)      0.892909      0.892909
      (-0.560465,0.763795)      0.947367      0.947367
      (0.306357,0.0262752)      0.307481      0.307481

C8_ACOS_TEST
  C8_ACOS computes the inverse cosine;

       C1=C8_UNIFORM_01          C2 = C8_ACOS(C1)           C3 = C8_COS(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)        (1.10915,0.141009)       (0.44986,-0.126667)
      (-0.843197,-0.34428)      (-2.41642,-0.498201)      (-0.843197,-0.34428)
        (0.589627,0.26009)      (-0.973443,0.309595)        (0.589627,0.26009)
          (0.39114,0.3234)       (-1.19242,0.341349)          (0.39114,0.3234)
     (-0.139466,-0.156136)        (-1.709,-0.156993)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)     (-4.47484,-0.0796133)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)        (1.55508,0.597163)     (0.0185993,-0.633214)
       (0.89285,0.0103136)     (-0.467681,0.0228756)       (0.89285,0.0103136)
      (-0.560465,0.763795)      (-4.27004,-0.767531)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (-1.25956,0.0275979)      (0.306357,0.0262752)

C8_ACOSH_TEST
  C8_ACOSH computes the inverse hyperbolic cosine;

       C1=C8_UNIFORM_01          C2 = C8_ACOSH(C1)          C3 = C8_COSH(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)       (-0.141009,1.10915)       (0.44986,-0.126667)
      (-0.843197,-0.34428)       (0.498201,-2.41642)      (-0.843197,-0.34428)
        (0.589627,0.26009)     (-0.309595,-0.973443)        (0.589627,0.26009)
          (0.39114,0.3234)      (-0.341349,-1.19242)          (0.39114,0.3234)
     (-0.139466,-0.156136)         (0.156993,-1.709)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)      (0.0796133,-4.47484)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)       (-0.597163,1.55508)     (0.0185993,-0.633214)
       (0.89285,0.0103136)    (-0.0228756,-0.467681)       (0.89285,0.0103136)
      (-0.560465,0.763795)       (0.767531,-4.27004)      (-0.560465,0.763795)
      (0.306357,0.0262752)     (-0.0275979,-1.25956)      (0.306357,0.0262752)

C8_ADD_TEST
  C8_ADD computes C3 = C1 + C2.

       C1=C8_UNIFORM_01          C2=C8_UNIFORM_01          C3 = C8_ADD(C1,C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (-0.843197,-0.34428)     (-0.393337,-0.470947)
        (0.589627,0.26009)          (0.39114,0.3234)        (0.980767,0.58349)
     (-0.139466,-0.156136)     (-0.236066,0.0774593)    (-0.375532,-0.0786762)
     (0.0185993,-0.633214)       (0.89285,0.0103136)      (0.911449,-0.622901)
      (-0.560465,0.763795)      (0.306357,0.0262752)       (-0.254108,0.79007)
      (0.500804,-0.779931)      (0.350471,0.0165551)      (0.851275,-0.763376)
      (0.434989,-0.266623)      (-0.200947,0.270711)     (0.234042,0.00408791)
     (-0.0974599,0.901881)     (-0.770245,-0.314307)      (-0.867705,0.587573)
      (-0.889181,0.265655)      (-0.779871,-0.55116)      (-1.66905,-0.285505)
     (0.0313602,-0.433556)       (0.249089,0.578743)        (0.28045,0.145186)

C8_ARG_TEST
  C8_ARG computes the argument of a C8.

            C1=random            ARG=C8_ARG(C1)

       (0.44986,-0.126667)       6.00872
      (-0.843197,-0.34428)       3.52924
        (0.589627,0.26009)      0.415436
          (0.39114,0.3234)      0.690879
     (-0.139466,-0.156136)       3.98332
     (-0.236066,0.0774593)       2.82454
     (0.0185993,-0.633214)       4.74175
       (0.89285,0.0103136)     0.0115508
      (-0.560465,0.763795)       2.20384
      (0.306357,0.0262752)     0.0855575

C8_ASIN_TEST
  C8_ASIN computes the inverse sine;

       C1=C8_UNIFORM_01          C2 = C8_ASIN(C1)           C3 = C8_SIN(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (0.461648,-0.141009)       (0.44986,-0.126667)
      (-0.843197,-0.34428)        (3.98721,0.498201)      (-0.843197,-0.34428)
        (0.589627,0.26009)       (2.54424,-0.309595)        (0.589627,0.26009)
          (0.39114,0.3234)       (2.76322,-0.341349)          (0.39114,0.3234)
     (-0.139466,-0.156136)         (3.2798,0.156993)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)       (6.04564,0.0796133)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)      (0.015714,-0.597163)     (0.0185993,-0.633214)
       (0.89285,0.0103136)      (2.03848,-0.0228756)       (0.89285,0.0103136)
      (-0.560465,0.763795)        (5.84083,0.767531)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (2.83035,-0.0275979)      (0.306357,0.0262752)

C8_ASINH_TEST
  C8_ASINH computes the inverse hyperbolic sine;

       C1=C8_UNIFORM_01          C2 = C8_ASINH(C1)          C3 = C8_SINH(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (-0.438679,-3.02595)       (0.44986,-0.126667)
      (-0.843197,-0.34428)     (-0.788715,-0.262344)      (-0.843197,-0.34428)
        (0.589627,0.26009)       (0.572932,-6.05875)        (0.589627,0.26009)
          (0.39114,0.3234)       (0.399232,-5.97929)          (0.39114,0.3234)
     (-0.139466,-0.156136)     (-0.140698,-0.155225)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)       (0.234582,-3.21704)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)     (-0.0240239,-2.45613)     (0.0185993,-0.633214)
       (0.89285,0.0103136)       (0.803562,-6.27549)       (0.89285,0.0103136)
      (-0.560465,0.763795)         (0.6651,-3.81193)      (-0.560465,0.763795)
      (0.306357,0.0262752)       (0.301849,-6.25806)      (0.306357,0.0262752)

C8_ATAN_TEST
  C8_ATAN computes the inverse tangent;

       C1=C8_UNIFORM_01          C2 = C8_ATAN(C1)          C3 = C8_TAN(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (-2.71382,-0.105499)       (0.44986,-0.126667)
      (-0.843197,-0.34428)      (-0.73502,-0.197908)      (-0.843197,-0.34428)
        (0.589627,0.26009)       (-2.58634,0.192787)        (0.589627,0.26009)
          (0.39114,0.3234)       (-2.73583,0.284294)          (0.39114,0.3234)
     (-0.139466,-0.156136)      (-0.14192,-0.154298)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)     (-0.233099,0.0734804)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)      (-3.11057,-0.746154)     (0.0185993,-0.633214)
       (0.89285,0.0103136)     (-2.41271,0.00573868)       (0.89285,0.0103136)
      (-0.560465,0.763795)      (-0.739806,0.556404)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (-2.84414,0.0240241)      (0.306357,0.0262752)

C8_ATANH_TEST
  C8_ATANH computes the inverse hyperbolic tangent;

       C1=C8_UNIFORM_01          C2 = C8_ATANH(C1)         C3 = C8_TANH(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)        (0.473511,2.98487)       (0.44986,-0.126667)
      (-0.843197,-0.34428)       (-0.800349,2.47756)      (-0.843197,-0.34428)
        (0.589627,0.26009)       (0.599279,0.363538)        (0.589627,0.26009)
          (0.39114,0.3234)       (0.364173,0.358338)          (0.39114,0.3234)
     (-0.139466,-0.156136)       (-0.136934,2.98376)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)     (-0.239027,0.0818171)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)         (0.0132759,2.577)     (0.0185993,-0.633214)
       (0.89285,0.0103136)        (1.4335,0.0507034)       (0.89285,0.0103136)
      (-0.560465,0.763795)          (-0.3394,0.7519)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (0.316262,0.0289863)      (0.306357,0.0262752)

C8_CONJ_TEST
  C8_CONJ computes C2 = conj ( C1 ).

       C1=C8_UNIFORM_01          C2=C8_CONJ(C1)             C3=C8_CONJ(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)        (0.44986,0.126667)       (0.44986,-0.126667)
      (-0.843197,-0.34428)       (-0.843197,0.34428)      (-0.843197,-0.34428)
        (0.589627,0.26009)       (0.589627,-0.26009)        (0.589627,0.26009)
          (0.39114,0.3234)         (0.39114,-0.3234)          (0.39114,0.3234)
     (-0.139466,-0.156136)      (-0.139466,0.156136)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)    (-0.236066,-0.0774593)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)      (0.0185993,0.633214)     (0.0185993,-0.633214)
       (0.89285,0.0103136)      (0.89285,-0.0103136)       (0.89285,0.0103136)
      (-0.560465,0.763795)     (-0.560465,-0.763795)      (-0.560465,0.763795)
      (0.306357,0.0262752)     (0.306357,-0.0262752)      (0.306357,0.0262752)

C8_COS_TEST
  C8_COS computes the cosine of a C8;

       C1=C8_UNIFORM_01          C2 = C8_COS(C1)           C3 = C8_COS(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (0.907742,0.0552273)       (-0.44986,0.126667)
      (-0.843197,-0.34428)      (0.704885,-0.262208)        (0.843197,0.34428)
        (0.589627,0.26009)       (0.859419,-0.14626)        (0.589627,0.26009)
          (0.39114,0.3234)      (0.973242,-0.125454)          (0.39114,0.3234)
     (-0.139466,-0.156136)      (1.00239,-0.0217933)       (0.139466,0.156136)
     (-0.236066,0.0774593)      (0.975184,0.0181343)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)       (1.20706,0.0125796)     (-0.0185993,0.633214)
       (0.89285,0.0103136)    (0.627228,-0.00803302)       (0.89285,0.0103136)
      (-0.560465,0.763795)        (1.10632,0.446663)      (-0.560465,0.763795)
      (0.306357,0.0262752)    (0.953768,-0.00792518)      (0.306357,0.0262752)

C8_COSH_TEST
  C8_COSH computes the hyperbolic cosine of a C8;

       C1=C8_UNIFORM_01          C2 = C8_COSH(C1)           C3 = C8_COSH(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (1.09407,-0.0587666)       (-0.44986,0.126667)
      (-0.843197,-0.34428)        (1.29625,0.319538)      (-0.843197,-0.34428)
        (0.589627,0.26009)        (1.13927,0.160573)      (-0.589627,-0.26009)
          (0.39114,0.3234)        (1.02162,0.127495)        (-0.39114,-0.3234)
     (-0.139466,-0.156136)      (0.997458,0.0217576)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)      (1.02491,-0.0184374)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)     (0.806269,-0.0110066)     (-0.0185993,0.633214)
       (0.89285,0.0103136)       (1.42571,0.0104815)     (-0.89285,-0.0103136)
      (-0.560465,0.763795)      (0.838648,-0.408272)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (1.04693,0.00817516)    (-0.306357,-0.0262752)

C8_CUBE_ROOT_TEST
  C8_CUBE_ROOT computes the principal cube root of a C8.

            C1=random            C2=C8_CUBE_ROOT(C1)         C3=C2*C2*C2

       (0.44986,-0.126667)      (-0.324994,0.704705)       (0.44986,-0.126667)
      (-0.843197,-0.34428)       (0.372454,0.894915)      (-0.843197,-0.34428)
        (0.589627,0.26009)       (0.855495,0.119231)        (0.589627,0.26009)
          (0.39114,0.3234)       (0.776602,0.182076)          (0.39114,0.3234)
     (-0.139466,-0.156136)       (0.142886,0.576334)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)       (0.370005,0.508236)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)      (-0.00840631,0.8588)     (0.0185993,-0.633214)
       (0.89285,0.0103136)       (0.96294,0.0037076)       (0.89285,0.0103136)
      (-0.560465,0.763795)       (0.728835,0.658328)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (0.674678,0.0192464)      (0.306357,0.0262752)

C8_DIV_TEST
  C8_DIV computes C3 = C1 / C2.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01         C3=C8_DIV(C1,C2)           C4 = C1 / C2
     ---------------------     ---------------------     ---------------------    ---------------------

       (0.44986,-0.126667)      (-0.843197,-0.34428)       (-0.40471,0.315467)       (-0.40471,0.315467)
        (0.589627,0.26009)          (0.39114,0.3234)       (1.22192,-0.345347)       (1.22192,-0.345347)
     (-0.139466,-0.156136)     (-0.236066,0.0774593)       (0.337436,0.772127)       (0.337436,0.772127)
     (0.0185993,-0.633214)       (0.89285,0.0103136)     (0.0126374,-0.709352)     (0.0126374,-0.709352)
      (-0.560465,0.763795)      (0.306357,0.0262752)        (-1.60383,2.63071)        (-1.60383,2.63071)
      (0.500804,-0.779931)      (0.350471,0.0165551)        (1.32088,-2.28777)        (1.32088,-2.28777)
      (0.434989,-0.266623)      (-0.200947,0.270711)      (-1.40403,-0.564638)      (-1.40403,-0.564638)
     (-0.0974599,0.901881)     (-0.770245,-0.314307)      (-0.301127,-1.04802)      (-0.301127,-1.04802)
      (-0.889181,0.265655)      (-0.779871,-0.55116)      (0.599827,-0.764557)      (0.599827,-0.764557)
     (0.0313602,-0.433556)       (0.249089,0.578743)     (-0.612376,-0.317752)     (-0.612376,-0.317752)

C8_DIV_R8_TEST
  C8_DIV_R8 computes C3 = C1 / R2.

        C1=C8_UNIFORM_01          R2=R8_UNIFORM_01         C3=C8_DIV_R8(C1,R2)           C4 = C1 / R2
     ---------------------     ---------------------     ---------------------    ---------------------

       (0.44986,-0.126667)      0.829509                   (0.54232,-0.152702)       (0.54232,-0.152702)
       (-0.64583,0.380263)     0.0661187                    (-9.76772,5.75121)        (-9.76772,5.75121)
          (0.39114,0.3234)      0.043829                     (8.92422,7.37868)         (8.92422,7.37868)
       (0.737082,0.301125)      0.449539                    (1.63964,0.669852)        (1.63964,0.669852)
     (0.0185993,-0.633214)      0.797287                 (0.0233282,-0.794211)     (0.0233282,-0.794211)
    (0.0342881,-0.0257429)      0.350752                (0.0977559,-0.0733933)    (0.0977559,-0.0733933)
      (0.306357,0.0262752)      0.859097                  (0.356603,0.0305847)      (0.356603,0.0305847)
        (0.656079,0.64063)    0.00751236                     (87.3333,85.2768)         (87.3333,85.2768)
      (0.434989,-0.266623)      0.113664                    (3.82697,-2.34571)        (3.82697,-2.34571)
      (0.262172,-0.531879)      0.267132                    (0.98143,-1.99107)        (0.98143,-1.99107)

C8_EXP_TEST
  C8_EXP computes C2 = e ^ C1.

        C1=C8_UNIFORM_01          C2=C8_EXP(C1)           C3=C8_LOG(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)       (1.55553,-0.198095)         (0.44986,6.15652)
      (-0.843197,-0.34428)       (0.40508,-0.145245)       (-0.843197,5.93891)
        (0.589627,0.26009)        (1.74266,0.463755)        (0.589627,0.26009)
          (0.39114,0.3234)        (1.40201,0.469908)          (0.39114,0.3234)
     (-0.139466,-0.156136)      (0.859242,-0.135259)       (-0.139466,6.12705)
     (-0.236066,0.0774593)       (0.78736,0.0611107)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)      (0.821263,-0.602848)       (0.0185993,5.64997)
       (0.89285,0.0103136)       (2.44195,0.0251862)       (0.89285,0.0103136)
      (-0.560465,0.763795)       (0.412345,0.394903)      (-0.560465,0.763795)
      (0.306357,0.0262752)         (1.358,0.0356899)      (0.306357,0.0262752)

C8_I_TEST
  C8_I returns the imaginary unit as a C8.
  C1 = C8_I ( ) =   (              0,              1 )
  C2 = C1 * C1 =   (             -1,              0 )

C8_IMAG_TEST
  C8_IMAG computes the imaginary part of a C8.

       C1=C8_UNIFORM_01          R2=C8_IMAG(C1)    R3=imag(C1)
     ---------------------     ---------------  ---------------

       (0.44986,-0.126667)     -0.126667     -0.126667
      (-0.843197,-0.34428)      -0.34428      -0.34428
        (0.589627,0.26009)       0.26009       0.26009
          (0.39114,0.3234)        0.3234        0.3234
     (-0.139466,-0.156136)     -0.156136     -0.156136
     (-0.236066,0.0774593)     0.0774593     0.0774593
     (0.0185993,-0.633214)     -0.633214     -0.633214
       (0.89285,0.0103136)     0.0103136     0.0103136
      (-0.560465,0.763795)      0.763795      0.763795
      (0.306357,0.0262752)     0.0262752     0.0262752

C8_INV_TEST
  C8_INV computes C2 = 1 / C1.
  Check by C3 = 1 / C2.

        C1=C8_UNIFORM_01          C2=C8_INV(C1)             C3=C8_INV(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)         (2.05962,0.57993)       (0.44986,-0.126667)
      (-0.843197,-0.34428)        (-1.0165,0.415041)      (-0.843197,-0.34428)
        (0.589627,0.26009)        (1.41974,-0.62626)        (0.589627,0.26009)
          (0.39114,0.3234)        (1.51853,-1.25554)          (0.39114,0.3234)
     (-0.139466,-0.156136)        (-3.18204,3.56238)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)       (-3.82435,-1.25486)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)       (0.0463469,1.57788)     (0.0185993,-0.633214)
       (0.89285,0.0103136)      (1.11986,-0.0129359)       (0.89285,0.0103136)
      (-0.560465,0.763795)     (-0.624471,-0.851021)      (-0.560465,0.763795)
      (0.306357,0.0262752)       (3.24033,-0.277913)      (0.306357,0.0262752)

C8_LE_L1_TEST
  C8_LE_L1 evalues (C1 <= C2) using the L1 norm.

       C1=C8_UNIFORM_01()      C2 = C8_UNIFORM_01()      L3 = C8_LE_L1(C1,C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (-0.843197,-0.34428)          1
        (0.589627,0.26009)          (0.39114,0.3234)          0
     (-0.139466,-0.156136)     (-0.236066,0.0774593)          1
     (0.0185993,-0.633214)       (0.89285,0.0103136)          1
      (-0.560465,0.763795)      (0.306357,0.0262752)          0
      (0.500804,-0.779931)      (0.350471,0.0165551)          0
      (0.434989,-0.266623)      (-0.200947,0.270711)          0
     (-0.0974599,0.901881)     (-0.770245,-0.314307)          1
      (-0.889181,0.265655)      (-0.779871,-0.55116)          1
     (0.0313602,-0.433556)       (0.249089,0.578743)          1

C8_LE_L2_TEST
  C8_LE_L2 evalues (C1 <= C2) using the L2 norm.

       C1=C8_UNIFORM_01()      C2 = C8_UNIFORM_01()      L3 = C8_LE_L2(C1,C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (-0.843197,-0.34428)          1
        (0.589627,0.26009)          (0.39114,0.3234)          0
     (-0.139466,-0.156136)     (-0.236066,0.0774593)          1
     (0.0185993,-0.633214)       (0.89285,0.0103136)          1
      (-0.560465,0.763795)      (0.306357,0.0262752)          0
      (0.500804,-0.779931)      (0.350471,0.0165551)          0
      (0.434989,-0.266623)      (-0.200947,0.270711)          0
     (-0.0974599,0.901881)     (-0.770245,-0.314307)          0
      (-0.889181,0.265655)      (-0.779871,-0.55116)          1
     (0.0313602,-0.433556)       (0.249089,0.578743)          1

C8_LE_LI_TEST
  C8_LE_LI evalues (C1 <= C2) using the Loo norm.

       C1=C8_UNIFORM_01()      C2 = C8_UNIFORM_01()      L3 = C8_LE_LI(C1,C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (-0.843197,-0.34428)          1
        (0.589627,0.26009)          (0.39114,0.3234)          0
     (-0.139466,-0.156136)     (-0.236066,0.0774593)          1
     (0.0185993,-0.633214)       (0.89285,0.0103136)          1
      (-0.560465,0.763795)      (0.306357,0.0262752)          0
      (0.500804,-0.779931)      (0.350471,0.0165551)          0
      (0.434989,-0.266623)      (-0.200947,0.270711)          0
     (-0.0974599,0.901881)     (-0.770245,-0.314307)          0
      (-0.889181,0.265655)      (-0.779871,-0.55116)          0
     (0.0313602,-0.433556)       (0.249089,0.578743)          1

C8_LOG_TEST
  C8_LOG computes log ( Z ).

        C1=C8_UNIFORM_01          C2=C8_LOG(C1)             C3=C8_EXP(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)       (-0.760672,6.00872)       (0.44986,-0.126667)
      (-0.843197,-0.34428)      (-0.0934605,3.52924)      (-0.843197,-0.34428)
        (0.589627,0.26009)      (-0.439369,0.415436)        (0.589627,0.26009)
          (0.39114,0.3234)      (-0.678217,0.690879)          (0.39114,0.3234)
     (-0.139466,-0.156136)        (-1.56373,3.98332)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)        (-1.39252,2.82454)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)       (-0.456515,4.74175)     (0.0185993,-0.633214)
       (0.89285,0.0103136)      (-0.11327,0.0115508)       (0.89285,0.0103136)
      (-0.560465,0.763795)      (-0.0540688,2.20384)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (-1.17934,0.0855575)      (0.306357,0.0262752)

C8_MAG_TEST
  C8_MAG computes the magnitude of a C8.

            C1=random            MAG=C8_MAG(C1)

       (0.44986,-0.126667)      0.467352
      (-0.843197,-0.34428)      0.910774
        (0.589627,0.26009)      0.644443
          (0.39114,0.3234)      0.507521
     (-0.139466,-0.156136)      0.209354
     (-0.236066,0.0774593)       0.24845
     (0.0185993,-0.633214)      0.633487
       (0.89285,0.0103136)      0.892909
      (-0.560465,0.763795)      0.947367
      (0.306357,0.0262752)      0.307481

C8_MUL_TEST
  C8_MUL computes C3 = C1 * C2.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01          C3=C8_MUL(C1,C2)          C4=C1*C2
     ---------------------     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (-0.843197,-0.34428)    (-0.422929,-0.0480722)    (-0.422929,-0.0480722)
        (0.589627,0.26009)          (0.39114,0.3234)       (0.146513,0.292417)       (0.146513,0.292417)
     (-0.139466,-0.156136)     (-0.236066,0.0774593)     (0.0450173,0.0260554)     (0.0450173,0.0260554)
     (0.0185993,-0.633214)       (0.89285,0.0103136)     (0.0231371,-0.565173)     (0.0231371,-0.565173)
      (-0.560465,0.763795)      (0.306357,0.0262752)      (-0.191771,0.219267)      (-0.191771,0.219267)
      (0.500804,-0.779931)      (0.350471,0.0165551)      (0.188429,-0.265052)      (0.188429,-0.265052)
      (0.434989,-0.266623)      (-0.200947,0.270711)     (-0.0152322,0.171333)     (-0.0152322,0.171333)
     (-0.0974599,0.901881)     (-0.770245,-0.314307)      (0.358536,-0.664037)      (0.358536,-0.664037)
      (-0.889181,0.265655)      (-0.779871,-0.55116)       (0.839866,0.282904)       (0.839866,0.282904)
     (0.0313602,-0.433556)       (0.249089,0.578743)     (0.258729,-0.0898448)     (0.258729,-0.0898448)

C8_NINT_TEST
  C8_NINT computes the nearest integer to a C8.

       C1=10*C8_UNIFORM_01      C2=C8_NINT(C1)
     ---------------------     ---------------

         (4.4986,-1.26667)                    (4,-1)
        (-8.43197,-3.4428)                   (-8,-3)
          (5.89627,2.6009)                     (6,3)
            (3.9114,3.234)                     (4,3)
       (-1.39466,-1.56136)                   (-1,-2)
       (-2.36066,0.774593)                    (-2,1)
       (0.185993,-6.33214)                    (0,-6)
         (8.9285,0.103136)                     (9,0)
        (-5.60465,7.63795)                    (-6,8)
        (3.06357,0.262752)                     (3,0)

C8_NORM_L1_TEST
  C8_NORM_L1 computes the L1 norm of a C8.

       C1=C8_UNIFORM_01        R2=C8_NORM_L1(C1)
     ---------------------     -----------------

       (0.44986,-0.126667)      0.576527
      (-0.843197,-0.34428)       1.18748
        (0.589627,0.26009)      0.849717
          (0.39114,0.3234)       0.71454
     (-0.139466,-0.156136)      0.295601
     (-0.236066,0.0774593)      0.313526
     (0.0185993,-0.633214)      0.651814
       (0.89285,0.0103136)      0.903163
      (-0.560465,0.763795)       1.32426
      (0.306357,0.0262752)      0.332632

C8_NORM_L2_TEST
  C8_NORM_L2 computes the L2 norm of a C8.

       C1=C8_UNIFORM_01        R2=C8_NORM_L2(C1)
     ---------------------     -----------------

       (0.44986,-0.126667)      0.467352
      (-0.843197,-0.34428)      0.910774
        (0.589627,0.26009)      0.644443
          (0.39114,0.3234)      0.507521
     (-0.139466,-0.156136)      0.209354
     (-0.236066,0.0774593)       0.24845
     (0.0185993,-0.633214)      0.633487
       (0.89285,0.0103136)      0.892909
      (-0.560465,0.763795)      0.947367
      (0.306357,0.0262752)      0.307481

C8_NORM_LI_TEST
  C8_NORM_LI computes the Loo norm of a C8.

       C1=C8_UNIFORM_01        R2=C8_NORM_LI(C1)
     ---------------------     -----------------

       (0.44986,-0.126667)       0.44986
      (-0.843197,-0.34428)      0.843197
        (0.589627,0.26009)      0.589627
          (0.39114,0.3234)       0.39114
     (-0.139466,-0.156136)      0.156136
     (-0.236066,0.0774593)      0.236066
     (0.0185993,-0.633214)      0.633214
       (0.89285,0.0103136)       0.89285
      (-0.560465,0.763795)      0.763795
      (0.306357,0.0262752)      0.306357

C8_NORMAL_01_TEST
  C8_NORMAL_01 generates unit pseudonormal
  complex values.
  Using initial random number seed = 123456789

       (1.67904,-0.472769)
      (-0.56606,-0.231124)
        (1.21293,0.535037)
         (1.26938,1.04954)
       (-1.66609,-1.86523)
       (-2.24246,0.735809)
      (0.0396749,-1.35074)
     (0.673068,0.00777484)
       (-0.275127,0.37494)
            (2.164,0.1856)
      (0.297785,-0.463758)
        (2.04454,0.096577)
       (1.39882,-0.857394)
        (-1.24299,1.67452)
     (-0.0670837,0.620783)
     (-0.794396,-0.324163)
      (-0.523768,0.156483)
     (-0.350567,-0.247757)
         (0.1317,-1.82076)
         (0.53738,1.24857)

C8_ONE_TEST
  C8_ONE returns one as a C8.
  C1 = C8_ONE ( ) =   (              1,              0 )
  C2 = C1 + C1 =   (              2,              0 )

C8_PRINT_TEST
  C8_PRINT prints a C8.

  Zero:  (              0,              0 )
  One:  (              1,              0 )
  Pi:  (        3.14159,              0 )
  i:  (              0,              1 )
  1+2i:  (              1,              2 )
 -12.34 + 56.78i:  (         -12.34,          56.78 )
  1E-3 + 2E-6i:  (          0.001,          2e-06 )
  3E8 - 4.5E9i:  (          3e+08,       -4.5e+09 )

C8_REAL_TEST
  C8_REAL computes the real part of a C8.

       C1=C8_UNIFORM_01          R2=C8_REAL(C1)    R3=REAL(C1)_
     ---------------------     ---------------  ---------------

       (0.44986,-0.126667)       0.44986       0.44986
      (-0.843197,-0.34428)     -0.843197     -0.843197
        (0.589627,0.26009)      0.589627      0.589627
          (0.39114,0.3234)       0.39114       0.39114
     (-0.139466,-0.156136)     -0.139466     -0.139466
     (-0.236066,0.0774593)     -0.236066     -0.236066
     (0.0185993,-0.633214)     0.0185993     0.0185993
       (0.89285,0.0103136)       0.89285       0.89285
      (-0.560465,0.763795)     -0.560465     -0.560465
      (0.306357,0.0262752)      0.306357      0.306357

C8_SIN_TEST
  C8_SIN computes the sine of a C8;

       C1=C8_UNIFORM_01          C2 = C8_SIN(C1)            C3 = C8_ASIN(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)       (0.438332,-0.11437)       (0.44986,-0.126667)
      (-0.843197,-0.34428)     (-0.791469,-0.233524)         (3.98479,0.34428)
        (0.589627,0.26009)       (0.574965,0.218619)        (2.55197,-0.26009)
          (0.39114,0.3234)       (0.401353,0.304214)         (2.75045,-0.3234)
     (-0.139466,-0.156136)     (-0.140712,-0.155249)        (3.28106,0.156136)
     (-0.236066,0.0774593)     (-0.234582,0.0753864)       (6.04712,0.0774593)
     (0.0185993,-0.633214)     (0.0224531,-0.676269)     (0.0185993,-0.633214)
       (0.89285,0.0103136)     (0.778904,0.00646876)      (2.24874,-0.0103136)
      (-0.560465,0.763795)      (-0.694324,0.711703)        (5.72272,0.763795)
      (0.306357,0.0262752)      (0.301691,0.0250547)      (2.83524,-0.0262752)

C8_SINH_TEST
  C8_SINH computes the hyperbolic sine of a C8;

       C1=C8_UNIFORM_01          C2 = C8_SINH(C1)           C3 = C8_ASINH(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)       (0.46146,-0.139329)      (-0.438679,-3.02595)
      (-0.843197,-0.34428)      (-0.89117,-0.464783)     (-0.788715,-0.262344)
        (0.589627,0.26009)       (0.603391,0.303182)       (0.572932,-6.05875)
          (0.39114,0.3234)       (0.380392,0.342413)       (0.399232,-5.97929)
     (-0.139466,-0.156136)     (-0.138216,-0.157017)     (-0.140698,-0.155225)
     (-0.236066,0.0774593)     (-0.237551,0.0795481)       (0.234582,-3.21704)
     (0.0185993,-0.633214)     (0.0149943,-0.591841)     (-0.0240239,-2.45613)
       (0.89285,0.0103136)       (1.01624,0.0147047)       (0.803562,-6.27549)
      (-0.560465,0.763795)      (-0.426304,0.803175)         (0.6651,-3.81193)
      (0.306357,0.0262752)      (0.311064,0.0275148)       (0.301849,-6.25806)

C8_SQRT_TEST
  C8_SQRT computes the principal square root of a C8.

            C1=random            C2=C8_SQRT(C1)              C3=C2*C2

       (0.44986,-0.126667)     (-0.677205,0.0935222)       (0.44986,-0.126667)
      (-0.843197,-0.34428)      (-0.183817,0.936475)      (-0.843197,-0.34428)
        (0.589627,0.26009)       (0.785516,0.165554)        (0.589627,0.26009)
          (0.39114,0.3234)       (0.670321,0.241228)          (0.39114,0.3234)
     (-0.139466,-0.156136)      (-0.186933,0.417624)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)      (0.0786873,0.492197)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)      (-0.571002,0.554476)     (0.0185993,-0.633214)
       (0.89285,0.0103136)     (0.944923,0.00545738)       (0.89285,0.0103136)
      (-0.560465,0.763795)       (0.439831,0.868283)      (-0.560465,0.763795)
      (0.306357,0.0262752)       (0.554003,0.023714)      (0.306357,0.0262752)

C8_SUB_TEST
  C8_SUB computes C3 = C1 - C2.

       C1=C8_UNIFORM_01          C2=C8_UNIFORM_01          C3 = C8_SUB(C1,C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (-0.843197,-0.34428)        (1.29306,0.217613)
        (0.589627,0.26009)          (0.39114,0.3234)     (0.198487,-0.0633098)
     (-0.139466,-0.156136)     (-0.236066,0.0774593)     (0.0966005,-0.233595)
     (0.0185993,-0.633214)       (0.89285,0.0103136)      (-0.87425,-0.643528)
      (-0.560465,0.763795)      (0.306357,0.0262752)       (-0.866822,0.73752)
      (0.500804,-0.779931)      (0.350471,0.0165551)      (0.150333,-0.796486)
      (0.434989,-0.266623)      (-0.200947,0.270711)      (0.635936,-0.537333)
     (-0.0974599,0.901881)     (-0.770245,-0.314307)        (0.672785,1.21619)
      (-0.889181,0.265655)      (-0.779871,-0.55116)       (-0.10931,0.816815)
     (0.0313602,-0.433556)       (0.249089,0.578743)       (-0.217729,-1.0123)

C8_TAN_TEST
  C8_TAN computes the tangent of a C8;

       C1=C8_UNIFORM_01          C2 = C8_TAN(C1)           C3 = C8_ATAN(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)        (0.473464,-0.1548)      (-2.69173,-0.126667)
      (-0.843197,-0.34428)     (-0.878091,-0.657931)      (-0.843197,-0.34428)
        (0.589627,0.26009)       (0.608112,0.357871)        (-2.55197,0.26009)
          (0.39114,0.3234)       (0.366014,0.359758)         (-2.75045,0.3234)
     (-0.139466,-0.156136)     (-0.136945,-0.157856)     (-0.139466,-0.156136)
     (-0.236066,0.0774593)     (-0.239031,0.0817497)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)     (0.0127612,-0.560395)      (-3.12299,-0.633214)
       (0.89285,0.0103136)       (1.24148,0.0262131)      (-2.24874,0.0103136)
      (-0.560465,0.763795)       (-0.31631,0.771013)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (0.316075,0.0288956)      (-2.83524,0.0262752)

C8_TANH_TEST
  C8_TANH computes the hyperbolic tangent of a C8;

       C1=C8_UNIFORM_01         C2 = C8_TANH(C1)            C3 = C8_ATANH(C2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      (0.427391,-0.104392)         (0.44986,3.01493)
      (-0.843197,-0.34428)      (-0.73144,-0.178253)       (-0.843197,2.79731)
        (0.589627,0.26009)       (0.556088,0.187741)        (0.589627,0.26009)
          (0.39114,0.3234)       (0.407819,0.284273)          (0.39114,0.3234)
     (-0.139466,-0.156136)     (-0.141935,-0.154321)       (-0.139466,2.98546)
     (-0.236066,0.0774593)     (-0.233098,0.0734214)     (-0.236066,0.0774593)
     (0.0185993,-0.633214)     (0.0286125,-0.733659)       (0.0185993,2.50838)
       (0.89285,0.0103136)     (0.712836,0.00507336)       (0.89285,0.0103136)
      (-0.560465,0.763795)      (-0.787838,0.574165)      (-0.560465,0.763795)
      (0.306357,0.0262752)      (0.297306,0.0239597)      (0.306357,0.0262752)

C8_TO_CARTESIAN_TEST
  C8_TO_CARTESIAN computes C8 -> ( X, Y ).

        C1=C8_UNIFORM_01    (X2,Y2)=C8_TO_CARTESIAN(C1)     C3=CARTESIAN_TO_C8(X2,Y2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)       0.44986     -0.126667       (0.44986,-0.126667)
      (-0.843197,-0.34428)     -0.843197      -0.34428      (-0.843197,-0.34428)
        (0.589627,0.26009)      0.589627       0.26009        (0.589627,0.26009)
          (0.39114,0.3234)       0.39114        0.3234          (0.39114,0.3234)
     (-0.139466,-0.156136)     -0.139466     -0.156136     (-0.139466,-0.156136)
     (-0.236066,0.0774593)     -0.236066     0.0774593     (-0.236066,0.0774593)
     (0.0185993,-0.633214)     0.0185993     -0.633214     (0.0185993,-0.633214)
       (0.89285,0.0103136)       0.89285     0.0103136       (0.89285,0.0103136)
      (-0.560465,0.763795)     -0.560465      0.763795      (-0.560465,0.763795)
      (0.306357,0.0262752)      0.306357     0.0262752      (0.306357,0.0262752)

C8_TO_POLAR_TEST
  C8_TO_POLAR computes C8 -> ( R, T ).

        C1=C8_UNIFORM_01     (X2,Y2)=C8_TO_POLAR(C1)     C3=POLAR_TO_C8(X2,Y2)
     ---------------------     ---------------------     ---------------------

       (0.44986,-0.126667)      0.467352       6.00872       (0.44986,-0.126667)
      (-0.843197,-0.34428)      0.910774       3.52924      (-0.843197,-0.34428)
        (0.589627,0.26009)      0.644443      0.415436        (0.589627,0.26009)
          (0.39114,0.3234)      0.507521      0.690879          (0.39114,0.3234)
     (-0.139466,-0.156136)      0.209354       3.98332     (-0.139466,-0.156136)
     (-0.236066,0.0774593)       0.24845       2.82454     (-0.236066,0.0774593)
     (0.0185993,-0.633214)      0.633487       4.74175     (0.0185993,-0.633214)
       (0.89285,0.0103136)      0.892909     0.0115508       (0.89285,0.0103136)
      (-0.560465,0.763795)      0.947367       2.20384      (-0.560465,0.763795)
      (0.306357,0.0262752)      0.307481     0.0855575      (0.306357,0.0262752)

C8_UNIFORM_01_TEST
  C8_UNIFORM_01 returns a uniformly random "unit" C8

       C1=C8_UNIFORM_01(SEED)
     ---------------------

       (0.44986,-0.126667)
      (-0.843197,-0.34428)
        (0.589627,0.26009)
          (0.39114,0.3234)
     (-0.139466,-0.156136)
     (-0.236066,0.0774593)
     (0.0185993,-0.633214)
       (0.89285,0.0103136)
      (-0.560465,0.763795)
      (0.306357,0.0262752)

C8_ZERO_TEST
  C8_ZERO returns zero as a C8.
  C1 = C8_ZERO ( ) =   (              0,              0 )

C8MAT_IDENTITY_NEW_TEST
  C8MAT_IDENTITY_NEW returns the complex identity matrix.

  The identity matrix:

  Col:               1                   2                   3                   4     
  Row
  ---
    1:         1         0         0         0         0         0         0         0
    2:         0         0         1         0         0         0         0         0
    3:         0         0         0         0         1         0         0         0
    4:         0         0         0         0         0         0         1         0

C8MAT_INDICATOR_NEW_TEST
  C8MAT_INDICATOR_NEW returns the complex indicator matrix.

  The indicator matrix:

  Col:               1                   2                   3     
  Row
  ---
    1:         1         1         1         2         1         3
    2:         2         1         2         2         2         3
    3:         3         1         3         2         3         3
    4:         4         1         4         2         4         3
    5:         5         1         5         2         5         3

C8MAT_NORM_FRO_TEST
  C8MAT_NORM_FRO returns the Frobenius norm of a matrix.

  The indicator matrix:

  Col:               1                   2                   3                   4     
  Row
  ---
    1:         1         1         1         2         1         3         1         4
    2:         2         1         2         2         2         3         2         4
    3:         3         1         3         2         3         3         3         4
    4:         4         1         4         2         4         3         4         4
    5:         5         1         5         2         5         3         5         4

  Frobenius norm = 19.2354

C8MAT_NORM_L1_TEST
  C8MAT_NORM_L1 returns the L1 norm of a matrix.

  The indicator matrix:

  Col:               1                   2                   3                   4     
  Row
  ---
    1:         1         1         1         2         1         3         1         4
    2:         2         1         2         2         2         3         2         4
    3:         3         1         3         2         3         3         3         4
    4:         4         1         4         2         4         3         4         4
    5:         5         1         5         2         5         3         5         4

  L1 norm = 25.6552

C8MAT_NORM_LI_TEST
  C8MAT_NORM_LI returns the Loo norm of a matrix.

  The indicator matrix:

  Col:               1                   2                   3                   4     
  Row
  ---
    1:         1         1         1         2         1         3         1         4
    2:         2         1         2         2         2         3         2         4
    3:         3         1         3         2         3         3         3         4
    4:         4         1         4         2         4         3         4         4
    5:         5         1         5         2         5         3         5         4

  Loo norm = 22.7183

C8MAT_UNIFORM_01_NEW_TEST
  C8MAT_UNIFORM_01_NEW computes a random complex matrix.

  The matrix:

  Col:               1                   2                   3                   4     
  Row
  ---
    1:   0.44986  -0.126667  -0.236066  0.0774593  0.500804  -0.779931  -0.770245  -0.314307
    2:  -0.843197  -0.34428  0.0185993  -0.633214  0.350471  0.0165551  -0.889181  0.265655
    3:  0.589627   0.26009   0.89285  0.0103136  0.434989  -0.266623  -0.779871  -0.55116
    4:   0.39114    0.3234  -0.560465  0.763795  -0.200947  0.270711  0.0313602  -0.433556
    5:  -0.139466  -0.156136  0.306357  0.0262752  -0.0974599  0.901881  0.249089  0.578743

C8VEC_INDICATOR_NEW_TEST
  C8VEC_INDICATOR_NEW sets A = (1-1i,2-2i,...,N-Ni)

  The indicator vector:

         0: 1  -1
         1: 2  -2
         2: 3  -3
         3: 4  -4
         4: 5  -5
         5: 6  -6
         6: 7  -7
         7: 8  -8
         8: 9  -9
         9: 10  -10

C8VEC_NINT_TEST
  C8VEC_NINT rounds a complex vector.

  The initial vector:

         0: 2.6293  0.716242
         1: -3.18314  -4.25099
         2: 2.16786  3.06933
         3: 0.985498  2.79042
         4: -0.228922  -1.19907

  The random C8VEC:

         0: 3  1
         1: -3  -4
         2: 2  3
         3: 1  3
         4: 0  -1

C8VEC_NORM_L1_TEST
  C8VEC_NORM_L1 computes the L1 norm of a C8VEC

  The indicator vector:

         0: 1  -1
         1: 2  -2
         2: 3  -3
         3: 4  -4
         4: 5  -5

  L1 norm = 21.2132

C8VEC_NORM_L2_TEST
  C8VEC_NORM_L2 computes the L2 norm of a C8VEC

  The indicator vector:

         0: 1  -1
         1: 2  -2
         2: 3  -3
         3: 4  -4
         4: 5  -5

  L2 norm = 10.4881

C8VEC_NORM_LI_TEST
  C8VEC_NORM_LI computes the Loo norm of a C8VEC

  The indicator vector:

         0: 1  -1
         1: 2  -2
         2: 3  -3
         3: 4  -4
         4: 5  -5

  Loo norm = 7.07107

C8VEC_PRINT_TEST
  C8VEC_PRINT prints a C8VEC

  The indicator vector:

         0: 1  -1
         1: 2  -2
         2: 3  -3
         3: 4  -4
         4: 5  -5

C8VEC_PRINT_PART_TEST
  C8VEC_PRINT_PART prints part of a C8VEC

  Part of the vector:

         0               1              -1
         1               2              -2
         2               3              -3
         3               4              -4
         4               5              -5
         5               6              -6
         6               7              -7
         7               8              -8
  ........  ..............  ..............
        99             100            -100

C8VEC_SORT_A_L1_TEST
  C8VEC_SORT_A_L1 sorts a C8VEC by L1 norm

  The unsorted vector:

         0: 0.44986  -0.126667
         1: -0.843197  -0.34428
         2: 0.589627  0.26009
         3: 0.39114  0.3234
         4: -0.139466  -0.156136
         5: -0.236066  0.0774593
         6: 0.0185993  -0.633214
         7: 0.89285  0.0103136
         8: -0.560465  0.763795
         9: 0.306357  0.0262752

   I             A(I)                   L1(A(I))

   0         (-0.139466,-0.156136)        0.295601
   1         (-0.236066,0.0774593)        0.313526
   2          (0.306357,0.0262752)        0.332632
   3           (0.44986,-0.126667)        0.576527
   4         (0.0185993,-0.633214)        0.651814
   5              (0.39114,0.3234)         0.71454
   6            (0.589627,0.26009)        0.849717
   7           (0.89285,0.0103136)        0.903163
   8          (-0.843197,-0.34428)         1.18748
   9          (-0.560465,0.763795)         1.32426

C8VEC_SORT_A_L2_TEST
  C8VEC_SORT_A_L2 sorts a C8VEC by L2 norm

  The unsorted vector:

         0: 0.44986  -0.126667
         1: -0.843197  -0.34428
         2: 0.589627  0.26009
         3: 0.39114  0.3234
         4: -0.139466  -0.156136
         5: -0.236066  0.0774593
         6: 0.0185993  -0.633214
         7: 0.89285  0.0103136
         8: -0.560465  0.763795
         9: 0.306357  0.0262752

   I             A(I)                   L2(A(I))

   0         (-0.139466,-0.156136)        0.209354
   1         (-0.236066,0.0774593)         0.24845
   2          (0.306357,0.0262752)        0.307481
   3           (0.44986,-0.126667)        0.467352
   4              (0.39114,0.3234)        0.507521
   5         (0.0185993,-0.633214)        0.633487
   6            (0.589627,0.26009)        0.644443
   7           (0.89285,0.0103136)        0.892909
   8          (-0.843197,-0.34428)        0.910774
   9          (-0.560465,0.763795)        0.947367

C8VEC_SORT_A_LI_TEST
  C8VEC_SORT_A_LI sorts a C8VEC by Loo norm

  The unsorted vector:

         0: 0.44986  -0.126667
         1: -0.843197  -0.34428
         2: 0.589627  0.26009
         3: 0.39114  0.3234
         4: -0.139466  -0.156136
         5: -0.236066  0.0774593
         6: 0.0185993  -0.633214
         7: 0.89285  0.0103136
         8: -0.560465  0.763795
         9: 0.306357  0.0262752

   I             A(I)                   Loo(A(I))

   0         (-0.139466,-0.156136)        0.156136
   1         (-0.236066,0.0774593)        0.236066
   2          (0.306357,0.0262752)        0.306357
   3              (0.39114,0.3234)         0.39114
   4           (0.44986,-0.126667)         0.44986
   5            (0.589627,0.26009)        0.589627
   6         (0.0185993,-0.633214)        0.633214
   7          (-0.560465,0.763795)        0.763795
   8          (-0.843197,-0.34428)        0.843197
   9           (0.89285,0.0103136)         0.89285

C8VEC_SPIRAL_NEW_TEST
  C8VEC_SPIRAL_NEW returns N points on a spiral
  which includes M complete turns.

  The spiral points:

         0: 5  0
         1: 4.18579  2.41667
         2: 2.33333  4.04145
         3: 2.75546e-16  4.5
         4: -2.16667  3.75278
         5: -3.60844  2.08333
         6: -4  4.89859e-16
         7: -3.31976  -1.91667
         8: -1.83333  -3.17543
         9: -6.4294e-16  -3.5
        10: 1.66667  -2.88675
        11: 2.74241  -1.58333
        12: 3  -7.34788e-16

C8VEC_UNIFORM_01_NEW_TEST
  C8VEC_UNIFORM_01_NEW computes a random complex vector.

  The random C8VEC:

         0: 0.44986  -0.126667
         1: -0.843197  -0.34428
         2: 0.589627  0.26009
         3: 0.39114  0.3234
         4: -0.139466  -0.156136

C8VEC_UNITY_NEW_TEST
  C8VEC_UNITY_NEW sets A to the N roots of unity.

  The N roots of unity:

         0: 1  0
         1: 0.866025  0.5
         2: 0.5  0.866025
         3: 6.12323e-17  1
         4: -0.5  0.866025
         5: -0.866025  0.5
         6: -1  1.22465e-16
         7: -0.866025  -0.5
         8: -0.5  -0.866025
         9: -1.83697e-16  -1
        10: 0.5  -0.866025
        11: 0.866025  -0.5

CARTESIAN_TO_C8_TEST
  CARTESIAN_TO_C8 computes ( X, Y ) -> C8.

        X1,Y1=R8_UNIFORM_01    C2=CARTESIAN_TO_C8(X1,Y1)   (X3,Y3)=C8_TO_CARTESIAN(C2)     
     ---------------------     ---------------------     ---------------------

      0.218418      0.956318       (0.218418,0.956318)      0.218418      0.956318
      0.829509      0.561695       (0.829509,0.561695)      0.829509      0.561695
      0.415307     0.0661187      (0.415307,0.0661187)      0.415307     0.0661187
      0.257578      0.109957       (0.257578,0.109957)      0.257578      0.109957
      0.043829      0.633966       (0.043829,0.633966)      0.043829      0.633966
     0.0617272      0.449539      (0.0617272,0.449539)     0.0617272      0.449539
      0.401306      0.754673       (0.401306,0.754673)      0.401306      0.754673
      0.797287    0.00183837     (0.797287,0.00183837)      0.797287    0.00183837
      0.897504      0.350752       (0.897504,0.350752)      0.897504      0.350752
     0.0945448     0.0136169     (0.0945448,0.0136169)     0.0945448     0.0136169

POLAR_TO_C8_TEST
  POLAR_TO_C8 computes ( R, T ) -> C8.

        X1,Y1=R8_UNIFORM_01    C2=POLAR_TO_C8(X1,Y1)   (X3,Y3)=C8_TO_POLAR(C2)     
     ---------------------     ---------------------     ---------------------

      0.218418       6.00872     (0.210243,-0.0591983)      0.218418       6.00872
      0.829509       3.52924     (-0.767962,-0.313561)      0.829509       3.52924
      0.415307      0.415436       (0.379981,0.167613)      0.415307      0.415436
      0.257578      0.690879       (0.198512,0.164132)      0.257578      0.690879
      0.043829       3.98332   (-0.0291977,-0.0326876)      0.043829       3.98332
     0.0617272       2.82454    (-0.0586506,0.0192447)     0.0617272       2.82454
      0.401306       4.74175     (0.0117824,-0.401133)      0.401306       4.74175
      0.797287     0.0115508     (0.797234,0.00920912)      0.797287     0.0115508
      0.897504       2.20384      (-0.530966,0.723594)      0.897504       2.20384
     0.0945448     0.0855575    (0.0941989,0.00807914)     0.0945448     0.0855575

R8_ATAN_TEST
  R8_ATAN computes the arc-tangent given Y and X;
  ATAN2 is the system version of this routine.

       X             Y          ATAN2(Y,X)    R8_ATAN(Y,X)

               1               0               0               0
               1               1        0.785398        0.785398
               0               1          1.5708          1.5708
              -1               1         2.35619         2.35619
              -1               0         3.14159         3.14159
              -1              -1        -2.35619         3.92699
               0              -1         -1.5708         4.71239
               1              -1       -0.785398         5.49779

R8_UNIFORM_01_TEST
  R8_UNIFORM_01 samples a uniform random distribution in [0,1].
  distributed random numbers.
  Using initial random number seed = 123456789

  First few values:

       0        0.218418
       1        0.956318
       2        0.829509
       3        0.561695
       4        0.415307
       5       0.0661187
       6        0.257578
       7        0.109957
       8        0.043829
       9        0.633966

  Number of samples was 1000
  Minimum value was 0.00183837
  Maximum value was 0.997908
  Average value was 0.50304
  Variance was      0.0822497

R8POLY2_ROOT_TEST
  R8POLY2_ROOT finds quadratic equation roots.

         A         B         C     R1         R2

         2        -2       -24                     (4,0)                    (-3,0)
         1       -20       100                    (10,0)                    (10,0)
         1        -2        10                     (1,3)                    (1,-3)

R8POLY3_ROOT_TEST
  R8POLY3_ROOT finds roots of cubic equations.


  Polynomial coefficients A, B, C, D:

  A =        1
  B =       -6
  C =       11
  D =       -6

  Roots:

  (1,0)
  (3,0)
  (2,0)

  Polynomial coefficients A, B, C, D:

  A =        9
  B =      -36
  C =       54
  D =      -27

  Roots:

  (1,0)
  (1.5,0.866025)
  (1.5,-0.866025)

  Polynomial coefficients A, B, C, D:

  A =        1
  B =       -5
  C =        8
  D =       -4

  Roots:

  (1,0)
  (2,0)
  (2,-0)

  Polynomial coefficients A, B, C, D:

  A =        1
  B =       -8
  C =       25
  D =      -26

  Roots:

  (2,0)
  (3,2)
  (3,-2)

R8POLY4_ROOT_TEST
  R8POLY4_ROOT finds roots of quartic equations.


  A =        1
  B =      -10
  C =       35
  D =      -50
  E =       24

  Roots:

  (4,0)
  (1,0)
  (3,0)
  (2,-0)

  A =        1
  B =       -5
  C =        1
  D =       21
  E =      -18

  Roots:

  (3,0)
  (3,0)
  (1,0)
  (-2,-0)

  A =        1
  B =      -22
  C =      141
  D =     -220
  E =      100

  Roots:

  (10,0)
  (10,0)
  (1,0)
  (1,-0)

  A =        1
  B =      -16
  C =       72
  D =     -128
  E =       80

  Roots:

  (10,0)
  (2,0)
  (2,0)
  (2,-0)

  A =        1
  B =      -20
  C =      150
  D =     -500
  E =      625

  Roots:

  (5,0)
  (5,0)
  (5,0)
  (5,-0)

  A =        1
  B =        2
  C =        1
  D =        8
  E =      -12

  Roots:

  (-4.40688e-17,2)
  (-2.88998e-16,-2)
  (1,0)
  (-3,-0)

  A =        1
  B =        0
  C =       13
  D =        0
  E =       36

  Roots:

  (-5.93459e-16,3)
  (8.99621e-16,2)
  (-8.99621e-16,-2)
  (5.93459e-16,-3)

C8LIB_TEST
  Normal end of execution.

12 February 2020 09:25:05 AM
